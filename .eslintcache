[{"/Users/mattbalnis/Projects/PropertyPro2.0/src/index.tsx":"1","/Users/mattbalnis/Projects/PropertyPro2.0/src/reportWebVitals.ts":"2","/Users/mattbalnis/Projects/PropertyPro2.0/src/Initialize.ts":"3","/Users/mattbalnis/Projects/PropertyPro2.0/src/App.tsx":"4","/Users/mattbalnis/Projects/PropertyPro2.0/src/Contexts/AuthorizationContext.tsx":"5","/Users/mattbalnis/Projects/PropertyPro2.0/src/aws-exports.js":"6","/Users/mattbalnis/Projects/PropertyPro2.0/src/Pages/LandingPage.tsx":"7","/Users/mattbalnis/Projects/PropertyPro2.0/src/Pages/LoadingPage.tsx":"8","/Users/mattbalnis/Projects/PropertyPro2.0/src/Pages/HomePage.tsx":"9","/Users/mattbalnis/Projects/PropertyPro2.0/src/Pages/SettingsPage.tsx":"10","/Users/mattbalnis/Projects/PropertyPro2.0/src/Pages/AboutPage.tsx":"11","/Users/mattbalnis/Projects/PropertyPro2.0/src/Pages/SessionViewerPage.tsx":"12","/Users/mattbalnis/Projects/PropertyPro2.0/src/Components/Header/Header.tsx":"13","/Users/mattbalnis/Projects/PropertyPro2.0/src/Pages/ErrorPage.tsx":"14","/Users/mattbalnis/Projects/PropertyPro2.0/src/Components/HomeDashboard/HomeDashboard.tsx":"15","/Users/mattbalnis/Projects/PropertyPro2.0/src/Components/LoadingSpinner/LoadingSpinner.tsx":"16","/Users/mattbalnis/Projects/PropertyPro2.0/src/Components/SessionViewerDashboard/SessionViewerDashboard.tsx":"17","/Users/mattbalnis/Projects/PropertyPro2.0/src/Components/Header/HeaderDropdown.tsx":"18","/Users/mattbalnis/Projects/PropertyPro2.0/src/Utils/Hooks/index.ts":"19","/Users/mattbalnis/Projects/PropertyPro2.0/src/Components/HomeDashboard/NewSessionSection.tsx":"20","/Users/mattbalnis/Projects/PropertyPro2.0/src/Contexts/ListingContext.tsx":"21","/Users/mattbalnis/Projects/PropertyPro2.0/src/Components/HomeDashboard/ExistingSessionsSection.tsx":"22","/Users/mattbalnis/Projects/PropertyPro2.0/src/Components/Listings/ListingsPanel.tsx":"23","/Users/mattbalnis/Projects/PropertyPro2.0/src/Components/Map/Map.tsx":"24","/Users/mattbalnis/Projects/PropertyPro2.0/src/Utils/Hooks/useSession.tsx":"25","/Users/mattbalnis/Projects/PropertyPro2.0/src/Components/HomeDashboard/NewSessionDialog.tsx":"26","/Users/mattbalnis/Projects/PropertyPro2.0/src/Components/HomeDashboard/EditSessionDialog.tsx":"27","/Users/mattbalnis/Projects/PropertyPro2.0/src/Components/Listings/ListingMarker.tsx":"28","/Users/mattbalnis/Projects/PropertyPro2.0/src/Components/Listings/ListingViewer.tsx":"29","/Users/mattbalnis/Projects/PropertyPro2.0/src/Components/Listings/NewListingDialog.tsx":"30","/Users/mattbalnis/Projects/PropertyPro2.0/src/Components/Listings/ListingsList.tsx":"31","/Users/mattbalnis/Projects/PropertyPro2.0/src/Models/Session.ts":"32","/Users/mattbalnis/Projects/PropertyPro2.0/src/graphql/mutations.ts":"33","/Users/mattbalnis/Projects/PropertyPro2.0/src/graphql/queries.ts":"34","/Users/mattbalnis/Projects/PropertyPro2.0/src/graphql/callGraphQL.ts":"35","/Users/mattbalnis/Projects/PropertyPro2.0/src/API/Google Places/Geocoding.ts":"36","/Users/mattbalnis/Projects/PropertyPro2.0/src/Utils/address.tsx":"37","/Users/mattbalnis/Projects/PropertyPro2.0/src/Components/Listings/EditListingDialog.tsx":"38","/Users/mattbalnis/Projects/PropertyPro2.0/src/Components/AddressSearchBar/AddressSearchBar.tsx":"39","/Users/mattbalnis/Projects/PropertyPro2.0/src/API/Google Places/index.ts":"40","/Users/mattbalnis/Projects/PropertyPro2.0/src/API/Google Places/AutoComplete.ts":"41"},{"size":1059,"mtime":1640898988970,"results":"42","hashOfConfig":"43"},{"size":425,"mtime":1640829583847,"results":"44","hashOfConfig":"43"},{"size":1102,"mtime":1640898971888,"results":"45","hashOfConfig":"43"},{"size":1356,"mtime":1640829583411,"results":"46","hashOfConfig":"43"},{"size":1829,"mtime":1640830999854,"results":"47","hashOfConfig":"43"},{"size":1746,"mtime":1640969346830,"results":"48","hashOfConfig":"43"},{"size":992,"mtime":1640826368612,"results":"49","hashOfConfig":"43"},{"size":671,"mtime":1640826368613,"results":"50","hashOfConfig":"43"},{"size":357,"mtime":1640826368611,"results":"51","hashOfConfig":"43"},{"size":208,"mtime":1640826368615,"results":"52","hashOfConfig":"43"},{"size":202,"mtime":1640826368608,"results":"53","hashOfConfig":"43"},{"size":1685,"mtime":1640826368614,"results":"54","hashOfConfig":"43"},{"size":727,"mtime":1640826368564,"results":"55","hashOfConfig":"43"},{"size":287,"mtime":1640826368609,"results":"56","hashOfConfig":"43"},{"size":289,"mtime":1640826368570,"results":"57","hashOfConfig":"43"},{"size":864,"mtime":1640826368588,"results":"58","hashOfConfig":"43"},{"size":680,"mtime":1640826368594,"results":"59","hashOfConfig":"43"},{"size":931,"mtime":1640826368565,"results":"60","hashOfConfig":"43"},{"size":30,"mtime":1640826368619,"results":"61","hashOfConfig":"43"},{"size":864,"mtime":1640826368574,"results":"62","hashOfConfig":"43"},{"size":1492,"mtime":1640826368597,"results":"63","hashOfConfig":"43"},{"size":2977,"mtime":1640826368569,"results":"64","hashOfConfig":"43"},{"size":1287,"mtime":1640826368585,"results":"65","hashOfConfig":"43"},{"size":3305,"mtime":1640826368590,"results":"66","hashOfConfig":"43"},{"size":2503,"mtime":1640826368620,"results":"67","hashOfConfig":"43"},{"size":4496,"mtime":1640826368571,"results":"68","hashOfConfig":"43"},{"size":2844,"mtime":1640826368568,"results":"69","hashOfConfig":"43"},{"size":541,"mtime":1640826368578,"results":"70","hashOfConfig":"43"},{"size":2649,"mtime":1640826368579,"results":"71","hashOfConfig":"43"},{"size":7721,"mtime":1640826368586,"results":"72","hashOfConfig":"43"},{"size":2012,"mtime":1640826368582,"results":"73","hashOfConfig":"43"},{"size":1920,"mtime":1640829841894,"results":"74","hashOfConfig":"43"},{"size":2404,"mtime":1640969342208,"results":"75","hashOfConfig":"43"},{"size":1650,"mtime":1640969342136,"results":"76","hashOfConfig":"43"},{"size":602,"mtime":1640826368624,"results":"77","hashOfConfig":"43"},{"size":1927,"mtime":1640826368552,"results":"78","hashOfConfig":"43"},{"size":170,"mtime":1640826368621,"results":"79","hashOfConfig":"43"},{"size":8071,"mtime":1640826368576,"results":"80","hashOfConfig":"43"},{"size":1394,"mtime":1640826368561,"results":"81","hashOfConfig":"43"},{"size":480,"mtime":1640826368553,"results":"82","hashOfConfig":"43"},{"size":2193,"mtime":1640826368551,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"6vjh30",{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"88"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"88"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"88"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"88"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"88"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"88"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"88"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"88"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"/Users/mattbalnis/Projects/PropertyPro2.0/src/index.tsx",[],"/Users/mattbalnis/Projects/PropertyPro2.0/src/reportWebVitals.ts",[],["175","176"],"/Users/mattbalnis/Projects/PropertyPro2.0/src/Initialize.ts",[],"/Users/mattbalnis/Projects/PropertyPro2.0/src/App.tsx",[],"/Users/mattbalnis/Projects/PropertyPro2.0/src/Contexts/AuthorizationContext.tsx",[],"/Users/mattbalnis/Projects/PropertyPro2.0/src/aws-exports.js",[],"/Users/mattbalnis/Projects/PropertyPro2.0/src/Pages/LandingPage.tsx",[],"/Users/mattbalnis/Projects/PropertyPro2.0/src/Pages/LoadingPage.tsx",[],"/Users/mattbalnis/Projects/PropertyPro2.0/src/Pages/HomePage.tsx",["177"],"import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport HomeDashboard from \"../Components/HomeDashboard/HomeDashboard\";\nimport { AuthorizationContext } from \"../Contexts/AuthorizationContext\";\n\nexport default function HomePage() {\n  return (\n    <Container className=\"p-3\" fluid>\n      <HomeDashboard />\n    </Container>\n  );\n}\n","/Users/mattbalnis/Projects/PropertyPro2.0/src/Pages/SettingsPage.tsx",[],"/Users/mattbalnis/Projects/PropertyPro2.0/src/Pages/AboutPage.tsx",[],"/Users/mattbalnis/Projects/PropertyPro2.0/src/Pages/SessionViewerPage.tsx",["178","179","180","181","182","183"],"import React from \"react\";\nimport { useQuery } from \"react-query\";\nimport { useParams } from \"react-router-dom\";\nimport { GetSessionQuery } from \"../API\";\nimport LoadingSpinner from \"../Components/LoadingSpinner/LoadingSpinner\";\nimport SessionViewerDashboard from \"../Components/SessionViewerDashboard/SessionViewerDashboard\";\nimport callGraphQL from \"../graphql/callGraphQL\";\nimport { getSession } from \"../graphql/queries\";\nimport SessionData, { mapGetSession } from \"../Models/Session\";\nimport { useSession } from \"../Utils/Hooks\";\nimport ErrorPage from \"./ErrorPage\";\n\ninterface RouteParams {\n  sessionId: string;\n}\n\nexport default function SessionViewerPage() {\n  const { sessionId } = useParams<RouteParams>();\n\n  const {\n    isLoading: loadingSessions,\n    isError,\n    data: matchingSession,\n  } = useSession(sessionId);\n\n  const [sessionLoadError, setSessionLoadError] = React.useState(false);\n  const [sessionFromRoute, setSessionFromRoute] = React.useState<SessionData>();\n\n  // set the selected session based on the ID from the route\n  React.useEffect(() => {\n    if (loadingSessions) return;\n    if (!sessionId) {\n      setSessionLoadError(true);\n      return;\n    }\n\n    if (!matchingSession) {\n      setSessionLoadError(true);\n    } else {\n      setSessionFromRoute(matchingSession);\n      setSessionLoadError(false);\n    }\n  }, [sessionId, loadingSessions, matchingSession]);\n\n  if (sessionLoadError)\n    return (\n      <ErrorPage text=\"Could not find a session matching the specified id.\" />\n    );\n\n  if (loadingSessions || !sessionFromRoute)\n    return <LoadingSpinner text=\"loading session...\" />;\n\n  return <SessionViewerDashboard session={sessionFromRoute} />;\n}\n","/Users/mattbalnis/Projects/PropertyPro2.0/src/Components/Header/Header.tsx",[],"/Users/mattbalnis/Projects/PropertyPro2.0/src/Pages/ErrorPage.tsx",[],"/Users/mattbalnis/Projects/PropertyPro2.0/src/Components/HomeDashboard/HomeDashboard.tsx",[],"/Users/mattbalnis/Projects/PropertyPro2.0/src/Components/LoadingSpinner/LoadingSpinner.tsx",[],"/Users/mattbalnis/Projects/PropertyPro2.0/src/Components/SessionViewerDashboard/SessionViewerDashboard.tsx",[],"/Users/mattbalnis/Projects/PropertyPro2.0/src/Components/Header/HeaderDropdown.tsx",[],"/Users/mattbalnis/Projects/PropertyPro2.0/src/Utils/Hooks/index.ts",[],"/Users/mattbalnis/Projects/PropertyPro2.0/src/Components/HomeDashboard/NewSessionSection.tsx",[],"/Users/mattbalnis/Projects/PropertyPro2.0/src/Contexts/ListingContext.tsx",[],"/Users/mattbalnis/Projects/PropertyPro2.0/src/Components/HomeDashboard/ExistingSessionsSection.tsx",["184"],"import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport LoadingSpinner from \"../LoadingSpinner/LoadingSpinner\";\nimport Card from \"react-bootstrap/Card\";\nimport SessionData from \"../../Models/Session\";\nimport Button from \"react-bootstrap/Button\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport EditSessionDialog from \"./EditSessionDialog\";\nimport { useDeleteSession, useSessions } from \"../../Utils/Hooks\";\n\nexport default function ExistingSessionsSection() {\n  const {\n    isLoading: loadingSessions,\n    isError,\n    data: existingSessions,\n  } = useSessions();\n\n  const [sessionToEdit, setSessionToEdit] =\n    React.useState<SessionData | undefined>(undefined);\n\n  function handleEditClick(session: SessionData) {\n    setSessionToEdit(session);\n  }\n\n  function getContent() {\n    if (loadingSessions) return <LoadingSpinner text=\"Loading sessions...\" />;\n\n    if (existingSessions && existingSessions.length > 0)\n      return (\n        <div>\n          {existingSessions?.map((session) => (\n            <SessionEntry\n              key={session.id}\n              sessionData={session}\n              onEditClick={handleEditClick}\n            />\n          ))}\n        </div>\n      );\n\n    return <div>No existing sessions</div>;\n  }\n\n  return (\n    <>\n      {sessionToEdit && (\n        <EditSessionDialog\n          session={sessionToEdit}\n          onClose={() => setSessionToEdit(undefined)}\n        />\n      )}\n      <Card>\n        <Card.Header>My Sessions</Card.Header>\n        <Card.Body>{getContent()}</Card.Body>\n      </Card>\n    </>\n  );\n}\n\ninterface ISessionEntryProps {\n  sessionData: SessionData;\n  onEditClick: (session: SessionData) => void;\n}\n\nfunction SessionEntry({ sessionData, onEditClick }: ISessionEntryProps) {\n  const deleteSessionMutation = useDeleteSession();\n\n  const [deletingSession, setDeletingSession] = React.useState(false);\n\n  const history = useHistory();\n\n  async function handleDeleteClick() {\n    if (deletingSession) return;\n\n    setDeletingSession(true);\n    await deleteSessionMutation.mutateAsync(sessionData.id!);\n    setDeletingSession(false);\n  }\n\n  function handleEditClick() {\n    onEditClick(sessionData);\n  }\n\n  function handleOpenClick() {\n    history.push(`/Session/${sessionData.id!}`);\n  }\n\n  return (\n    <Card>\n      <Card.Body>\n        <div className=\"d-flex justify-content-between\">\n          <div>{sessionData.name}</div>\n          <div>\n            <Button variant=\"primary\" onClick={handleOpenClick}>\n              Open\n            </Button>{\" \"}\n            <Button variant=\"primary\" onClick={handleEditClick}>\n              Edit\n            </Button>{\" \"}\n            <Button variant=\"danger\" onClick={handleDeleteClick}>\n              {deletingSession ? (\n                <Spinner animation=\"border\" variant=\"primary\" size=\"sm\" />\n              ) : (\n                \"Delete\"\n              )}\n            </Button>\n          </div>\n        </div>\n      </Card.Body>\n    </Card>\n  );\n}\n","/Users/mattbalnis/Projects/PropertyPro2.0/src/Components/Listings/ListingsPanel.tsx",["185","186"],"import React from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\";\nimport styles from \"./ListingsPanel.module.scss\";\nimport SessionData from \"../../Models/Session\";\nimport NewListingDialog from \"./NewListingDialog\";\nimport ListingsList from \"./ListingsList\";\nimport { ListingContext } from \"../../Contexts/ListingContext\";\nimport ListingViewer from \"./ListingViewer\";\n\nexport default function ListingsPanel({ session }: IProps) {\n  const { selectedListing } = React.useContext(ListingContext);\n\n  const [creatingNewListing, setCreatingNewListing] = React.useState(false);\n\n  function getContent() {\n    // if we have a selected listing, show it\n    if (selectedListing)\n      return <ListingViewer session={session} listing={selectedListing} />;\n\n    // otherwise, render the list of listings\n    return (\n      <ListingsList\n        onCreateNewListingClick={() => setCreatingNewListing(true)}\n        session={session}\n      />\n    );\n  }\n\n  return (\n    <>\n      {creatingNewListing && (\n        <NewListingDialog\n          session={session}\n          onClose={() => setCreatingNewListing(false)}\n        />\n      )}\n      <div className={styles.container}>{getContent()}</div>\n    </>\n  );\n}\n\ninterface IProps {\n  session: SessionData;\n}\n","/Users/mattbalnis/Projects/PropertyPro2.0/src/Components/Map/Map.tsx",[],"/Users/mattbalnis/Projects/PropertyPro2.0/src/Utils/Hooks/useSession.tsx",["187","188","189"],"import React from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"react-query\";\nimport {\n  CreateSessionMutation,\n  DeleteSessionMutation,\n  GetSessionQuery,\n  ListSessionsQuery,\n  UpdateSessionMutation,\n} from \"../../API\";\nimport callGraphQL from \"../../graphql/callGraphQL\";\nimport {\n  createSession,\n  deleteSession,\n  updateSession,\n} from \"../../graphql/mutations\";\nimport { getSession, listSessions } from \"../../graphql/queries\";\nimport SessionData, {\n  mapGetSession,\n  mapListSessions,\n  mapUpdateSession,\n  sessionDataToApiSessionInput,\n} from \"../../Models/Session\";\n\nexport function useSessions() {\n  return useQuery<SessionData[]>(\"sessions\", async () => {\n    const result = await callGraphQL<ListSessionsQuery>(listSessions);\n    return mapListSessions(result);\n  });\n}\n\nexport function useSession(sessionId: string) {\n  return useQuery<SessionData | undefined>(\n    [\"sessions\", sessionId],\n    async () => {\n      const result = await callGraphQL<GetSessionQuery>(getSession, {\n        id: sessionId,\n      });\n      return mapGetSession(result);\n    }\n  );\n}\n\nexport function useCreateSession() {\n  const queryClient = useQueryClient();\n\n  return useMutation(\n    async (newSession: SessionData) => {\n      const createSessionInput = sessionDataToApiSessionInput(newSession);\n      const response = await callGraphQL<CreateSessionMutation>(createSession, {\n        input: createSessionInput,\n      });\n      // TODO: map the response to the created SessionData object\n    },\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries(\"sessions\");\n      },\n    }\n  );\n}\n\nexport function useUpdateSession() {\n  const queryClient = useQueryClient();\n\n  return useMutation(\n    async (updatedSession: SessionData) => {\n      const sessionUpdateInput = sessionDataToApiSessionInput(updatedSession);\n      const response = await callGraphQL<UpdateSessionMutation>(updateSession, {\n        input: sessionUpdateInput,\n      });\n      return mapUpdateSession(response);\n    },\n    {\n      onSuccess: (data, variables) => {\n        queryClient.invalidateQueries(\"sessions\");\n      },\n    }\n  );\n}\n\nexport function useDeleteSession() {\n  const queryClient = useQueryClient();\n\n  return useMutation(\n    async (sessionId: string) => {\n      const response = await callGraphQL<DeleteSessionMutation>(deleteSession, {\n        input: { id: sessionId },\n      });\n    },\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries(\"sessions\");\n      },\n    }\n  );\n}\n","/Users/mattbalnis/Projects/PropertyPro2.0/src/Components/HomeDashboard/NewSessionDialog.tsx",[],"/Users/mattbalnis/Projects/PropertyPro2.0/src/Components/HomeDashboard/EditSessionDialog.tsx",[],"/Users/mattbalnis/Projects/PropertyPro2.0/src/Components/Listings/ListingMarker.tsx",["190"],"import React from \"react\";\nimport classNames from \"classnames\";\nimport houseImg from \"../../Images/house.png\";\nimport { Listing } from \"../../Models/Session\";\nimport styles from \"./ListingMarker.module.scss\";\n\nexport default function ListingMarker({\n  lat,\n  lng,\n  hovered,\n}: ListingMarkerProps) {\n  return (\n    <img\n      className={classNames(styles.container, hovered && styles.hovered)}\n      src={houseImg}\n    />\n  );\n}\n\nexport interface ListingMarkerProps {\n  listing: Listing;\n  hovered?: boolean;\n  lat: number;\n  lng: number;\n}\n","/Users/mattbalnis/Projects/PropertyPro2.0/src/Components/Listings/ListingViewer.tsx",[],"/Users/mattbalnis/Projects/PropertyPro2.0/src/Components/Listings/NewListingDialog.tsx",[],"/Users/mattbalnis/Projects/PropertyPro2.0/src/Components/Listings/ListingsList.tsx",["191"],"import React from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport ListGroupItem from \"react-bootstrap/ListGroupItem\";\nimport SessionData, { Listing } from \"../../Models/Session\";\nimport styles from \"./ListingsList.module.scss\";\nimport { ListingContext } from \"../../Contexts/ListingContext\";\n\nexport default function ListingsList({\n  session,\n  onCreateNewListingClick,\n}: IListingsListProps) {\n  function getContent() {\n    if (!session.listings || session.listings.length < 1)\n      return <Card.Body>No listings</Card.Body>;\n\n    return (\n      <ListGroup>\n        {session.listings.map((listing) => (\n          <ListingsListItem key={listing.id} listing={listing} />\n        ))}\n      </ListGroup>\n    );\n  }\n\n  return (\n    <Card className={styles.card}>\n      <Card.Header className={styles.header}>\n        <span className={styles.title}>Listings</span>\n        <Button size=\"sm\" onClick={onCreateNewListingClick}>\n          +\n        </Button>\n      </Card.Header>\n      {getContent()}\n    </Card>\n  );\n}\n\ninterface IListingsListProps {\n  session: SessionData;\n  onCreateNewListingClick: () => void;\n}\n\nfunction ListingsListItem({ listing }: IListingsListItemProps) {\n  const { setSelectedListing, addHoveredListingId, removeHoveredListingId } =\n    React.useContext(ListingContext);\n\n  React.useEffect(() => {\n    return () => {\n      removeHoveredListingId(listing.id);\n    };\n  }, []);\n\n  function handleClick() {\n    setSelectedListing(listing);\n  }\n\n  function handleListingHover() {\n    addHoveredListingId(listing.id);\n  }\n\n  function handleListingUnhover() {\n    removeHoveredListingId(listing.id);\n  }\n\n  return (\n    <ListGroupItem\n      className={styles.listItem}\n      onClick={handleClick}\n      onMouseEnter={handleListingHover}\n      onMouseLeave={handleListingUnhover}\n    >\n      {listing.name}\n    </ListGroupItem>\n  );\n}\n\ninterface IListingsListItemProps {\n  listing: Listing;\n}\n","/Users/mattbalnis/Projects/PropertyPro2.0/src/Models/Session.ts",[],"/Users/mattbalnis/Projects/PropertyPro2.0/src/graphql/mutations.ts",[],"/Users/mattbalnis/Projects/PropertyPro2.0/src/graphql/queries.ts",[],"/Users/mattbalnis/Projects/PropertyPro2.0/src/graphql/callGraphQL.ts",[],"/Users/mattbalnis/Projects/PropertyPro2.0/src/API/Google Places/Geocoding.ts",[],"/Users/mattbalnis/Projects/PropertyPro2.0/src/Utils/address.tsx",[],"/Users/mattbalnis/Projects/PropertyPro2.0/src/Components/Listings/EditListingDialog.tsx",["192"],"import React from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport Col from \"react-bootstrap/Col\";\nimport { ListingContext } from \"../../Contexts/ListingContext\";\nimport { AutoCompleteSuggestion, SearchType } from \"../../API/Google Places\";\nimport AddressSearchBar from \"../AddressSearchBar/AddressSearchBar\";\nimport {\n  Coordinate,\n  geocodeByPlaceId,\n} from \"../../API/Google Places/Geocoding\";\nimport { useUpdateSession } from \"../../Utils/Hooks\";\nimport SessionData, { Listing } from \"../../Models/Session\";\n\nexport default function EditListingDialog({\n  onClose,\n  session,\n  listing,\n}: IProps) {\n  const { setSelectedListing } = React.useContext(ListingContext);\n\n  const updateSessionMutation = useUpdateSession();\n\n  const [formData, setFormData] = React.useState<EditListingFormData>({\n    ...listing,\n  });\n  const [formDataErrors, setFormDataErrors] =\n    React.useState<FormDataErrors>(DEFAULT_DATA_ERRORS);\n\n  async function handleSaveClick(event: any) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    const errors = validateFormData(formData);\n    setFormDataErrors(errors);\n    if (!hasErrors(errors)) {\n      const updatedListing: Listing = {\n        id: listing.id,\n        name: formData.name!,\n        address: formData.address!,\n        location: formData.location!,\n        price: formData.price!,\n        numberOfBedrooms: formData.numberOfBedrooms!,\n        numberOfBathrooms: formData.numberOfBathrooms!,\n      };\n      const updatedListings = (session.listings ?? []).map((l) => {\n        if (l.id === listing.id) return updatedListing;\n        return l;\n      });\n      await updateSessionMutation.mutateAsync({\n        ...session,\n        listings: updatedListings,\n      });\n      setSelectedListing(updatedListing);\n      onClose();\n    }\n  }\n\n  async function handleAddressSelect(address: AutoCompleteSuggestion) {\n    try {\n      const addressGeocodingInfo = await geocodeByPlaceId(address.id);\n      // there is guaranteed to be one result\n      const addressInfo = addressGeocodingInfo[0];\n      console.log(addressInfo);\n      setFormData((prev) => ({\n        ...prev,\n        address: addressInfo.name,\n        location: addressInfo.location,\n      }));\n    } catch (err) {\n      // TODO: show toast and maybe clear the search?\n      console.error(\"Failed to load location information.\");\n    }\n  }\n\n  return (\n    <Modal show={true} onHide={onClose}>\n      <Modal.Header closeButton>\n        <Modal.Title>Edit Listing</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Form>\n          <Form.Group controlId=\"listingForm.Name\">\n            <Form.Label>Name</Form.Label>\n            <Form.Control\n              type=\"listing name\"\n              value={formData.name ?? \"\"}\n              onChange={(event: any) =>\n                setFormData((prev) => ({\n                  ...prev,\n                  name: event.target.value,\n                }))\n              }\n              isInvalid={!!formDataErrors.nameError}\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              {formDataErrors.nameError}\n            </Form.Control.Feedback>\n          </Form.Group>\n          <Form.Group controlId=\"listingForm.Address\">\n            <Form.Label>Address</Form.Label>\n            <AddressSearchBar\n              defaultInputValue={formData.address}\n              onSelect={handleAddressSelect}\n              isInvalid={!!formDataErrors.addressError}\n              searchType={SearchType.Address}\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              {formDataErrors.nameError}\n            </Form.Control.Feedback>\n          </Form.Group>\n          <Form.Group controlId=\"listingForm.Price\">\n            <Form.Label>Price</Form.Label>\n            <Form.Control\n              type=\"number\"\n              value={formData.price ?? \"\"}\n              onChange={(event: any) =>\n                setFormData((prev) => ({\n                  ...prev,\n                  price: event.target.value,\n                }))\n              }\n              isInvalid={!!formDataErrors.priceError}\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              {formDataErrors.priceError}\n            </Form.Control.Feedback>\n          </Form.Group>\n          <Form.Row>\n            <Form.Group as={Col} controlId=\"listingForm.bedrooms\">\n              <Form.Label>Bedrooms</Form.Label>\n              <Form.Control\n                type=\"number\"\n                value={formData.numberOfBedrooms ?? \"\"}\n                onChange={(event: any) =>\n                  setFormData((prev) => ({\n                    ...prev,\n                    numberOfBedrooms: event.target.value,\n                  }))\n                }\n                isInvalid={!!formDataErrors.numberOfBedroomsError}\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                {formDataErrors.numberOfBedroomsError}\n              </Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group as={Col} controlId=\"listingForm.bathrooms\">\n              <Form.Label>Bathrooms</Form.Label>\n              <Form.Control\n                type=\"number\"\n                value={formData.numberOfBathrooms ?? \"\"}\n                onChange={(event: any) =>\n                  setFormData((prev) => ({\n                    ...prev,\n                    numberOfBathrooms: event.target.value,\n                  }))\n                }\n                isInvalid={!!formDataErrors.numberOfBathroomsError}\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                {formDataErrors.numberOfBathroomsError}\n              </Form.Control.Feedback>\n            </Form.Group>\n          </Form.Row>\n        </Form>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"secondary\" onClick={onClose}>\n          Cancel\n        </Button>\n        <Button variant=\"primary\" onClick={handleSaveClick}>\n          Save\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\ninterface IProps {\n  onClose: () => void;\n  listing: Listing;\n  session: SessionData;\n}\n\ninterface EditListingFormData {\n  name?: string;\n  address?: string;\n  location?: Coordinate;\n  price?: number;\n  numberOfBedrooms?: number;\n  numberOfBathrooms?: number;\n}\n\nconst DEFAULT_FORM_DATA: EditListingFormData = {\n  name: undefined,\n  address: undefined,\n  location: undefined,\n  price: undefined,\n  numberOfBedrooms: undefined,\n  numberOfBathrooms: undefined,\n};\n\ninterface FormDataErrors {\n  nameError?: string;\n  addressError?: string;\n  locationError?: string;\n  priceError?: string;\n  numberOfBedroomsError?: string;\n  numberOfBathroomsError?: string;\n}\n\nconst DEFAULT_DATA_ERRORS: FormDataErrors = {\n  nameError: undefined,\n  addressError: undefined,\n  locationError: undefined,\n  priceError: undefined,\n  numberOfBedroomsError: undefined,\n  numberOfBathroomsError: undefined,\n};\n\nfunction validateFormData(formData: EditListingFormData): FormDataErrors {\n  let nameError,\n    addressError,\n    locationError,\n    priceError,\n    numberOfBedroomsError,\n    numberOfBathroomsError;\n\n  if (!formData.name) {\n    nameError = \"Must provide name for listing\";\n  }\n  if (!formData.address) {\n    addressError = \"Must enter an address\";\n  }\n  if (!formData.location) {\n    locationError = \"Could not find address for location\";\n  }\n\n  if (!formData.price) {\n    priceError = \"Must provide a price for the listing\";\n  }\n\n  if (!formData.numberOfBedrooms) {\n    numberOfBedroomsError = \"Must provide a number of bedrooms\";\n  }\n\n  if (!formData.numberOfBathrooms) {\n    numberOfBathroomsError = \"Must provide a number of bathrooms\";\n  }\n\n  return {\n    nameError,\n    addressError,\n    locationError,\n    priceError,\n    numberOfBedroomsError,\n    numberOfBathroomsError,\n  };\n}\n\nfunction hasErrors(formDataError: FormDataErrors) {\n  let errorFound = false;\n\n  let key: keyof typeof formDataError;\n  for (key in formDataError) {\n    if (!!formDataError[key]) errorFound = true;\n  }\n\n  return errorFound;\n}\n","/Users/mattbalnis/Projects/PropertyPro2.0/src/Components/AddressSearchBar/AddressSearchBar.tsx",[],"/Users/mattbalnis/Projects/PropertyPro2.0/src/API/Google Places/index.ts",[],"/Users/mattbalnis/Projects/PropertyPro2.0/src/API/Google Places/AutoComplete.ts",[],{"ruleId":"193","replacedBy":"194"},{"ruleId":"195","replacedBy":"196"},{"ruleId":"197","severity":1,"message":"198","line":4,"column":10,"nodeType":"199","messageId":"200","endLine":4,"endColumn":30},{"ruleId":"197","severity":1,"message":"201","line":2,"column":10,"nodeType":"199","messageId":"200","endLine":2,"endColumn":18},{"ruleId":"197","severity":1,"message":"202","line":4,"column":10,"nodeType":"199","messageId":"200","endLine":4,"endColumn":25},{"ruleId":"197","severity":1,"message":"203","line":7,"column":8,"nodeType":"199","messageId":"200","endLine":7,"endColumn":19},{"ruleId":"197","severity":1,"message":"204","line":8,"column":10,"nodeType":"199","messageId":"200","endLine":8,"endColumn":20},{"ruleId":"197","severity":1,"message":"205","line":9,"column":23,"nodeType":"199","messageId":"200","endLine":9,"endColumn":36},{"ruleId":"197","severity":1,"message":"206","line":22,"column":5,"nodeType":"199","messageId":"200","endLine":22,"endColumn":12},{"ruleId":"197","severity":1,"message":"206","line":14,"column":5,"nodeType":"199","messageId":"200","endLine":14,"endColumn":12},{"ruleId":"197","severity":1,"message":"207","line":2,"column":8,"nodeType":"199","messageId":"200","endLine":2,"endColumn":12},{"ruleId":"197","severity":1,"message":"208","line":3,"column":8,"nodeType":"199","messageId":"200","endLine":3,"endColumn":14},{"ruleId":"197","severity":1,"message":"209","line":1,"column":8,"nodeType":"199","messageId":"200","endLine":1,"endColumn":13},{"ruleId":"197","severity":1,"message":"210","line":49,"column":13,"nodeType":"199","messageId":"200","endLine":49,"endColumn":21},{"ruleId":"197","severity":1,"message":"210","line":86,"column":13,"nodeType":"199","messageId":"200","endLine":86,"endColumn":21},{"ruleId":"211","severity":1,"message":"212","line":13,"column":5,"nodeType":"213","endLine":16,"endColumn":7},{"ruleId":"214","severity":1,"message":"215","line":53,"column":6,"nodeType":"216","endLine":53,"endColumn":8,"suggestions":"217"},{"ruleId":"197","severity":1,"message":"218","line":195,"column":7,"nodeType":"199","messageId":"200","endLine":195,"endColumn":45},"no-native-reassign",["219"],"no-negated-in-lhs",["220"],"@typescript-eslint/no-unused-vars","'AuthorizationContext' is defined but never used.","Identifier","unusedVar","'useQuery' is defined but never used.","'GetSessionQuery' is defined but never used.","'callGraphQL' is defined but never used.","'getSession' is defined but never used.","'mapGetSession' is defined but never used.","'isError' is assigned a value but never used.","'Card' is defined but never used.","'Button' is defined but never used.","'React' is defined but never used.","'response' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'listing.id' and 'removeHoveredListingId'. Either include them or remove the dependency array.","ArrayExpression",["221"],"'DEFAULT_FORM_DATA' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"222","fix":"223"},"Update the dependencies array to be: [listing.id, removeHoveredListingId]",{"range":"224","text":"225"},[1497,1499],"[listing.id, removeHoveredListingId]"]