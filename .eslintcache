[{"/Users/mattbalnis/Repos/PropertyPro2/src/index.tsx":"1","/Users/mattbalnis/Repos/PropertyPro2/src/reportWebVitals.ts":"2","/Users/mattbalnis/Repos/PropertyPro2/src/Initialize.ts":"3","/Users/mattbalnis/Repos/PropertyPro2/src/App.tsx":"4","/Users/mattbalnis/Repos/PropertyPro2/src/Contexts/AuthorizationContext.tsx":"5","/Users/mattbalnis/Repos/PropertyPro2/src/aws-exports.js":"6","/Users/mattbalnis/Repos/PropertyPro2/src/Components/Header.tsx":"7","/Users/mattbalnis/Repos/PropertyPro2/src/Pages/About/AboutPage.tsx":"8","/Users/mattbalnis/Repos/PropertyPro2/src/Pages/Loading/LoadingPage.tsx":"9","/Users/mattbalnis/Repos/PropertyPro2/src/Pages/Landing/LandingPage.tsx":"10","/Users/mattbalnis/Repos/PropertyPro2/src/Pages/Settings/SettingsPage.tsx":"11","/Users/mattbalnis/Repos/PropertyPro2/src/Pages/Home/HomePage.tsx":"12","/Users/mattbalnis/Repos/PropertyPro2/src/Pages/SessionViewer/SessionViewerPage.tsx":"13","/Users/mattbalnis/Repos/PropertyPro2/src/Components/HeaderDropdown.tsx":"14","/Users/mattbalnis/Repos/PropertyPro2/src/Components/LoadingSpinner.tsx":"15","/Users/mattbalnis/Repos/PropertyPro2/src/Pages/SessionViewer/Components/SessionViewerDashboard.tsx":"16","/Users/mattbalnis/Repos/PropertyPro2/src/Pages/Error/ErrorPage.tsx":"17","/Users/mattbalnis/Repos/PropertyPro2/src/Pages/Home/Components/HomeDashboard.tsx":"18","/Users/mattbalnis/Repos/PropertyPro2/src/Utils/Hooks/index.ts":"19","/Users/mattbalnis/Repos/PropertyPro2/src/Contexts/ListingContext.tsx":"20","/Users/mattbalnis/Repos/PropertyPro2/src/Contexts/PointOfInterestContext.tsx":"21","/Users/mattbalnis/Repos/PropertyPro2/src/Pages/SessionViewer/Components/SidePanel.tsx":"22","/Users/mattbalnis/Repos/PropertyPro2/src/Pages/Home/Components/NewSessionSection.tsx":"23","/Users/mattbalnis/Repos/PropertyPro2/src/Contexts/MapContext.tsx":"24","/Users/mattbalnis/Repos/PropertyPro2/src/Pages/SessionViewer/Components/Map.tsx":"25","/Users/mattbalnis/Repos/PropertyPro2/src/Pages/Home/Components/ExistingSessionsSection.tsx":"26","/Users/mattbalnis/Repos/PropertyPro2/src/Utils/Hooks/useSession.tsx":"27","/Users/mattbalnis/Repos/PropertyPro2/src/Pages/Home/Components/NewSessionDialog.tsx":"28","/Users/mattbalnis/Repos/PropertyPro2/src/Pages/SessionViewer/Components/MapMarker.tsx":"29","/Users/mattbalnis/Repos/PropertyPro2/src/Pages/Home/Components/EditSessionDialog.tsx":"30","/Users/mattbalnis/Repos/PropertyPro2/src/Pages/SessionViewer/Components/PointsOfInterest/PointsOfInterestPanel.tsx":"31","/Users/mattbalnis/Repos/PropertyPro2/src/Pages/SessionViewer/Components/Directions/DirectionsPanel.tsx":"32","/Users/mattbalnis/Repos/PropertyPro2/src/Pages/SessionViewer/Components/Listings/ListingsPanel.tsx":"33","/Users/mattbalnis/Repos/PropertyPro2/src/Models/Session.ts":"34","/Users/mattbalnis/Repos/PropertyPro2/src/graphql/mutations.ts":"35","/Users/mattbalnis/Repos/PropertyPro2/src/graphql/queries.ts":"36","/Users/mattbalnis/Repos/PropertyPro2/src/graphql/callGraphQL.ts":"37","/Users/mattbalnis/Repos/PropertyPro2/src/API/Google Places/Geocoding.ts":"38","/Users/mattbalnis/Repos/PropertyPro2/src/Components/AddressSearchBar.tsx":"39","/Users/mattbalnis/Repos/PropertyPro2/src/Pages/SessionViewer/Components/PointsOfInterest/PointOfInterestMarker.tsx":"40","/Users/mattbalnis/Repos/PropertyPro2/src/Pages/SessionViewer/Components/Listings/ListingMarker.tsx":"41","/Users/mattbalnis/Repos/PropertyPro2/src/Pages/SessionViewer/Components/Listings/ListingViewer.tsx":"42","/Users/mattbalnis/Repos/PropertyPro2/src/Pages/SessionViewer/Components/Listings/NewListingDialog.tsx":"43","/Users/mattbalnis/Repos/PropertyPro2/src/Pages/SessionViewer/Components/Listings/ListingsList.tsx":"44","/Users/mattbalnis/Repos/PropertyPro2/src/Pages/SessionViewer/Components/Listings/EditListingDialog.tsx":"45","/Users/mattbalnis/Repos/PropertyPro2/src/Utils/address.tsx":"46","/Users/mattbalnis/Repos/PropertyPro2/src/API/Google Places/index.ts":"47","/Users/mattbalnis/Repos/PropertyPro2/src/API/Google Places/AutoComplete.ts":"48","/Users/mattbalnis/Repos/PropertyPro2/src/Pages/SessionViewer/Components/Directions/DirectionsForm.tsx":"49","/Users/mattbalnis/Repos/PropertyPro2/src/Pages/SessionViewer/Components/PointsOfInterest/PointOfInterestViewer.tsx":"50","/Users/mattbalnis/Repos/PropertyPro2/src/Pages/SessionViewer/Components/PointsOfInterest/PointsOfInterestList.tsx":"51","/Users/mattbalnis/Repos/PropertyPro2/src/Pages/SessionViewer/Components/PointsOfInterest/NewPointOfInterestDialog.tsx":"52","/Users/mattbalnis/Repos/PropertyPro2/src/Pages/SessionViewer/Components/Directions/DirectionsResults.tsx":"53","/Users/mattbalnis/Repos/PropertyPro2/src/API/Google Routes/index.ts":"54","/Users/mattbalnis/Repos/PropertyPro2/src/API.ts":"55","/Users/mattbalnis/Repos/PropertyPro2/src/Pages/SessionViewer/Components/Directions/TravelModeButton.tsx":"56","/Users/mattbalnis/Repos/PropertyPro2/src/Pages/SessionViewer/Components/PointsOfInterest/EditPointOfInterestDialog.tsx":"57","/Users/mattbalnis/Repos/PropertyPro2/src/API/Google Routes/Directions.ts":"58","/Users/mattbalnis/Repos/PropertyPro2/src/Utils/Hooks/useOnClickOutside.tsx":"59","/Users/mattbalnis/Repos/PropertyPro2/src/Utils/Hooks/useSelectedListing.tsx":"60","/Users/mattbalnis/Repos/PropertyPro2/src/Contexts/SessionContext.tsx":"61","/Users/mattbalnis/Repos/PropertyPro2/src/Utils/Hooks/useSelectedPointOfInterest.tsx":"62"},{"size":1059,"mtime":1641740361127,"results":"63","hashOfConfig":"64"},{"size":425,"mtime":1641740361127,"results":"65","hashOfConfig":"64"},{"size":1102,"mtime":1641740361120,"results":"66","hashOfConfig":"64"},{"size":1603,"mtime":1641752206895,"results":"67","hashOfConfig":"64"},{"size":1829,"mtime":1641740361118,"results":"68","hashOfConfig":"64"},{"size":1746,"mtime":1641746068593,"results":"69","hashOfConfig":"64"},{"size":727,"mtime":1641740361118,"results":"70","hashOfConfig":"64"},{"size":202,"mtime":1641740361120,"results":"71","hashOfConfig":"64"},{"size":655,"mtime":1641740361121,"results":"72","hashOfConfig":"64"},{"size":995,"mtime":1641740361121,"results":"73","hashOfConfig":"64"},{"size":208,"mtime":1641740361125,"results":"74","hashOfConfig":"64"},{"size":269,"mtime":1641740361121,"results":"75","hashOfConfig":"64"},{"size":1432,"mtime":1641752206898,"results":"76","hashOfConfig":"64"},{"size":928,"mtime":1641740361118,"results":"77","hashOfConfig":"64"},{"size":864,"mtime":1641740361118,"results":"78","hashOfConfig":"64"},{"size":1119,"mtime":1641952676321,"results":"79","hashOfConfig":"64"},{"size":287,"mtime":1641740361120,"results":"80","hashOfConfig":"64"},{"size":289,"mtime":1641740361121,"results":"81","hashOfConfig":"64"},{"size":67,"mtime":1641752206898,"results":"82","hashOfConfig":"64"},{"size":1175,"mtime":1641952676315,"results":"83","hashOfConfig":"64"},{"size":1788,"mtime":1641740361119,"results":"84","hashOfConfig":"64"},{"size":1920,"mtime":1641952676322,"results":"85","hashOfConfig":"64"},{"size":864,"mtime":1641740361121,"results":"86","hashOfConfig":"64"},{"size":2241,"mtime":1641740361119,"results":"87","hashOfConfig":"64"},{"size":5228,"mtime":1642036857395,"results":"88","hashOfConfig":"64"},{"size":2984,"mtime":1641752206896,"results":"89","hashOfConfig":"64"},{"size":2503,"mtime":1641740361125,"results":"90","hashOfConfig":"64"},{"size":4699,"mtime":1641752206896,"results":"91","hashOfConfig":"64"},{"size":990,"mtime":1641952676319,"results":"92","hashOfConfig":"64"},{"size":2850,"mtime":1641740361121,"results":"93","hashOfConfig":"64"},{"size":1269,"mtime":1641952676321,"results":"94","hashOfConfig":"64"},{"size":2060,"mtime":1641740361122,"results":"95","hashOfConfig":"64"},{"size":995,"mtime":1641952676318,"results":"96","hashOfConfig":"64"},{"size":2237,"mtime":1641740361120,"results":"97","hashOfConfig":"64"},{"size":2404,"mtime":1641740361126,"results":"98","hashOfConfig":"64"},{"size":1650,"mtime":1641740361126,"results":"99","hashOfConfig":"64"},{"size":602,"mtime":1641740361126,"results":"100","hashOfConfig":"64"},{"size":1949,"mtime":1641740361117,"results":"101","hashOfConfig":"64"},{"size":1504,"mtime":1641752206896,"results":"102","hashOfConfig":"64"},{"size":4260,"mtime":1641952676320,"results":"103","hashOfConfig":"64"},{"size":4014,"mtime":1641952676317,"results":"104","hashOfConfig":"64"},{"size":3234,"mtime":1641952676317,"results":"105","hashOfConfig":"64"},{"size":8000,"mtime":1641952676318,"results":"106","hashOfConfig":"64"},{"size":2234,"mtime":1641952676318,"results":"107","hashOfConfig":"64"},{"size":8292,"mtime":1641752206897,"results":"108","hashOfConfig":"64"},{"size":170,"mtime":1641740361126,"results":"109","hashOfConfig":"64"},{"size":480,"mtime":1641740361117,"results":"110","hashOfConfig":"64"},{"size":2193,"mtime":1641740361117,"results":"111","hashOfConfig":"64"},{"size":3238,"mtime":1641752206896,"results":"112","hashOfConfig":"64"},{"size":3352,"mtime":1641952676321,"results":"113","hashOfConfig":"64"},{"size":2643,"mtime":1641952676321,"results":"114","hashOfConfig":"64"},{"size":6519,"mtime":1641952676320,"results":"115","hashOfConfig":"64"},{"size":1655,"mtime":1641740361122,"results":"116","hashOfConfig":"64"},{"size":30,"mtime":1641740361117,"results":"117","hashOfConfig":"64"},{"size":13540,"mtime":1641740361117,"results":"118","hashOfConfig":"64"},{"size":1102,"mtime":1641740361122,"results":"119","hashOfConfig":"64"},{"size":6726,"mtime":1641752206897,"results":"120","hashOfConfig":"64"},{"size":439,"mtime":1641740361117,"results":"121","hashOfConfig":"64"},{"size":1062,"mtime":1641752206898,"results":"122","hashOfConfig":"64"},{"size":1071,"mtime":1641952676322,"results":"123","hashOfConfig":"64"},{"size":553,"mtime":1641952676316,"results":"124","hashOfConfig":"64"},{"size":1190,"mtime":1641952676322,"results":"125","hashOfConfig":"64"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},"r8oxen",{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"128"},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"169","messages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"179","messages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"128"},{"filePath":"182","messages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"128"},{"filePath":"185","messages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"128"},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"192","messages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"128"},{"filePath":"197","messages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"201","messages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"203","messages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"205","messages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"207","messages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"209","messages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"211","messages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"215","messages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"217","messages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"219","messages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"221","messages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"128"},{"filePath":"224","messages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"226","messages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"228","messages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"230","messages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"128"},{"filePath":"233","messages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"235","messages":"236","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"237","messages":"238","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"239","messages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"241","messages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"243","messages":"244","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"245","messages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"128"},{"filePath":"248","messages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"128"},{"filePath":"251","messages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"253","messages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"255","messages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"257","messages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"259","messages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/mattbalnis/Repos/PropertyPro2/src/index.tsx",[],["261","262"],"/Users/mattbalnis/Repos/PropertyPro2/src/reportWebVitals.ts",[],"/Users/mattbalnis/Repos/PropertyPro2/src/Initialize.ts",[],"/Users/mattbalnis/Repos/PropertyPro2/src/App.tsx",[],"/Users/mattbalnis/Repos/PropertyPro2/src/Contexts/AuthorizationContext.tsx",[],"/Users/mattbalnis/Repos/PropertyPro2/src/aws-exports.js",[],["263","264"],"/Users/mattbalnis/Repos/PropertyPro2/src/Components/Header.tsx",[],"/Users/mattbalnis/Repos/PropertyPro2/src/Pages/About/AboutPage.tsx",[],"/Users/mattbalnis/Repos/PropertyPro2/src/Pages/Loading/LoadingPage.tsx",[],"/Users/mattbalnis/Repos/PropertyPro2/src/Pages/Landing/LandingPage.tsx",[],"/Users/mattbalnis/Repos/PropertyPro2/src/Pages/Settings/SettingsPage.tsx",[],"/Users/mattbalnis/Repos/PropertyPro2/src/Pages/Home/HomePage.tsx",[],"/Users/mattbalnis/Repos/PropertyPro2/src/Pages/SessionViewer/SessionViewerPage.tsx",["265"],"import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport LoadingSpinner from \"../../Components/LoadingSpinner\";\nimport SessionViewerDashboard from \"./Components/SessionViewerDashboard\";\nimport SessionData from \"../../Models/Session\";\nimport { useSession } from \"../../Utils/Hooks\";\nimport ErrorPage from \"../Error/ErrorPage\";\n\nexport default function SessionViewerPage() {\n  let { sessionId } = useParams<string>() as { sessionId: string };\n\n  const {\n    isLoading: loadingSessions,\n    isError,\n    data: matchingSession,\n  } = useSession(sessionId);\n\n  const [sessionLoadError, setSessionLoadError] = React.useState(false);\n  const [sessionFromRoute, setSessionFromRoute] = React.useState<SessionData>();\n\n  // set the selected session based on the ID from the route\n  React.useEffect(() => {\n    if (loadingSessions) return;\n    if (!sessionId) {\n      setSessionLoadError(true);\n      return;\n    }\n\n    if (!matchingSession) {\n      setSessionLoadError(true);\n    } else {\n      setSessionFromRoute(matchingSession);\n      setSessionLoadError(false);\n    }\n  }, [sessionId, loadingSessions, matchingSession]);\n\n  if (sessionLoadError)\n    return (\n      <ErrorPage text=\"Could not find a session matching the specified id.\" />\n    );\n\n  if (loadingSessions || !sessionFromRoute)\n    return <LoadingSpinner text=\"loading session...\" />;\n\n  return <SessionViewerDashboard session={sessionFromRoute} />;\n}\n","/Users/mattbalnis/Repos/PropertyPro2/src/Components/HeaderDropdown.tsx",[],"/Users/mattbalnis/Repos/PropertyPro2/src/Components/LoadingSpinner.tsx",[],"/Users/mattbalnis/Repos/PropertyPro2/src/Pages/SessionViewer/Components/SessionViewerDashboard.tsx",[],"/Users/mattbalnis/Repos/PropertyPro2/src/Pages/Error/ErrorPage.tsx",[],"/Users/mattbalnis/Repos/PropertyPro2/src/Pages/Home/Components/HomeDashboard.tsx",[],"/Users/mattbalnis/Repos/PropertyPro2/src/Utils/Hooks/index.ts",[],"/Users/mattbalnis/Repos/PropertyPro2/src/Contexts/ListingContext.tsx",["266"],"/Users/mattbalnis/Repos/PropertyPro2/src/Contexts/PointOfInterestContext.tsx",[],"/Users/mattbalnis/Repos/PropertyPro2/src/Pages/SessionViewer/Components/SidePanel.tsx",[],"/Users/mattbalnis/Repos/PropertyPro2/src/Pages/Home/Components/NewSessionSection.tsx",[],"/Users/mattbalnis/Repos/PropertyPro2/src/Contexts/MapContext.tsx",[],"/Users/mattbalnis/Repos/PropertyPro2/src/Pages/SessionViewer/Components/Map.tsx",["267","268"],"/Users/mattbalnis/Repos/PropertyPro2/src/Pages/Home/Components/ExistingSessionsSection.tsx",["269"],"import React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport LoadingSpinner from \"../../../Components/LoadingSpinner\";\nimport Card from \"react-bootstrap/Card\";\nimport SessionData from \"../../../Models/Session\";\nimport Button from \"react-bootstrap/Button\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport EditSessionDialog from \"./EditSessionDialog\";\nimport { useDeleteSession, useSessions } from \"../../../Utils/Hooks\";\n\nexport default function ExistingSessionsSection() {\n  const {\n    isLoading: loadingSessions,\n    isError,\n    data: existingSessions,\n  } = useSessions();\n\n  const [sessionToEdit, setSessionToEdit] =\n    React.useState<SessionData | undefined>(undefined);\n\n  function handleEditClick(session: SessionData) {\n    setSessionToEdit(session);\n  }\n\n  function getContent() {\n    if (loadingSessions) return <LoadingSpinner text=\"Loading sessions...\" />;\n\n    if (existingSessions && existingSessions.length > 0)\n      return (\n        <div>\n          {existingSessions?.map((session) => (\n            <SessionEntry\n              key={session.id}\n              sessionData={session}\n              onEditClick={handleEditClick}\n            />\n          ))}\n        </div>\n      );\n\n    return <div>No existing sessions</div>;\n  }\n\n  return (\n    <>\n      {sessionToEdit && (\n        <EditSessionDialog\n          session={sessionToEdit}\n          onClose={() => setSessionToEdit(undefined)}\n        />\n      )}\n      <Card>\n        <Card.Header>My Sessions</Card.Header>\n        <Card.Body>{getContent()}</Card.Body>\n      </Card>\n    </>\n  );\n}\n\ninterface ISessionEntryProps {\n  sessionData: SessionData;\n  onEditClick: (session: SessionData) => void;\n}\n\nfunction SessionEntry({ sessionData, onEditClick }: ISessionEntryProps) {\n  const deleteSessionMutation = useDeleteSession();\n\n  const [deletingSession, setDeletingSession] = React.useState(false);\n\n  const navigate = useNavigate();\n\n  async function handleDeleteClick() {\n    if (deletingSession) return;\n\n    setDeletingSession(true);\n    await deleteSessionMutation.mutateAsync(sessionData.id!);\n    setDeletingSession(false);\n  }\n\n  function handleEditClick() {\n    onEditClick(sessionData);\n  }\n\n  function handleOpenClick() {\n    navigate(`/Session/${sessionData.id!}`);\n  }\n\n  return (\n    <Card>\n      <Card.Body>\n        <div className=\"d-flex justify-content-between\">\n          <div>{sessionData.name}</div>\n          <div>\n            <Button variant=\"primary\" onClick={handleOpenClick}>\n              Open\n            </Button>{\" \"}\n            <Button variant=\"primary\" onClick={handleEditClick}>\n              Edit\n            </Button>{\" \"}\n            <Button variant=\"danger\" onClick={handleDeleteClick}>\n              {deletingSession ? (\n                <Spinner animation=\"border\" variant=\"primary\" size=\"sm\" />\n              ) : (\n                \"Delete\"\n              )}\n            </Button>\n          </div>\n        </div>\n      </Card.Body>\n    </Card>\n  );\n}\n","/Users/mattbalnis/Repos/PropertyPro2/src/Utils/Hooks/useSession.tsx",["270","271","272"],"import React from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"react-query\";\nimport {\n  CreateSessionMutation,\n  DeleteSessionMutation,\n  GetSessionQuery,\n  ListSessionsQuery,\n  UpdateSessionMutation,\n} from \"../../API\";\nimport callGraphQL from \"../../graphql/callGraphQL\";\nimport {\n  createSession,\n  deleteSession,\n  updateSession,\n} from \"../../graphql/mutations\";\nimport { getSession, listSessions } from \"../../graphql/queries\";\nimport SessionData, {\n  mapGetSession,\n  mapListSessions,\n  mapUpdateSession,\n  sessionDataToApiSessionInput,\n} from \"../../Models/Session\";\n\nexport function useSessions() {\n  return useQuery<SessionData[]>(\"sessions\", async () => {\n    const result = await callGraphQL<ListSessionsQuery>(listSessions);\n    return mapListSessions(result);\n  });\n}\n\nexport function useSession(sessionId: string) {\n  return useQuery<SessionData | undefined>(\n    [\"sessions\", sessionId],\n    async () => {\n      const result = await callGraphQL<GetSessionQuery>(getSession, {\n        id: sessionId,\n      });\n      return mapGetSession(result);\n    }\n  );\n}\n\nexport function useCreateSession() {\n  const queryClient = useQueryClient();\n\n  return useMutation(\n    async (newSession: SessionData) => {\n      const createSessionInput = sessionDataToApiSessionInput(newSession);\n      const response = await callGraphQL<CreateSessionMutation>(createSession, {\n        input: createSessionInput,\n      });\n      // TODO: map the response to the created SessionData object\n    },\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries(\"sessions\");\n      },\n    }\n  );\n}\n\nexport function useUpdateSession() {\n  const queryClient = useQueryClient();\n\n  return useMutation(\n    async (updatedSession: SessionData) => {\n      const sessionUpdateInput = sessionDataToApiSessionInput(updatedSession);\n      const response = await callGraphQL<UpdateSessionMutation>(updateSession, {\n        input: sessionUpdateInput,\n      });\n      return mapUpdateSession(response);\n    },\n    {\n      onSuccess: (data, variables) => {\n        queryClient.invalidateQueries(\"sessions\");\n      },\n    }\n  );\n}\n\nexport function useDeleteSession() {\n  const queryClient = useQueryClient();\n\n  return useMutation(\n    async (sessionId: string) => {\n      const response = await callGraphQL<DeleteSessionMutation>(deleteSession, {\n        input: { id: sessionId },\n      });\n    },\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries(\"sessions\");\n      },\n    }\n  );\n}\n","/Users/mattbalnis/Repos/PropertyPro2/src/Pages/Home/Components/NewSessionDialog.tsx",["273"],"import React from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport { AutoCompleteSuggestion, SearchType } from \"../../../API/Google Places\";\nimport AddressSearchBar from \"../../../Components/AddressSearchBar\";\nimport {\n  BoundingBox,\n  geocodeByAddress,\n} from \"../../../API/Google Places/Geocoding\";\nimport { useCreateSession } from \"../../../Utils/Hooks\";\n\nexport default function NewSessionDialog({ onClose }: IProps) {\n  const createSessionMutation = useCreateSession();\n\n  const [formData, setFormData] =\n    React.useState<CreateSessionFormData>(DEFAULT_FORM_DATA);\n  const [formDataErrors, setFormDataErrors] =\n    React.useState<FormDataErrors>(DEFAULT_DATA_ERRORS);\n\n  async function handleCreateClick(event: any) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    const errors = validateFormData(formData);\n    setFormDataErrors(errors);\n    if (!hasErrors(errors)) {\n      await createSessionMutation.mutateAsync({\n        name: formData.name!,\n        searchCity: formData.searchCity!,\n        searchBounds: formData.searchBounds!,\n      });\n      onClose();\n    }\n  }\n\n  async function handleCitySelect(city: string | undefined) {\n    if (!city) {\n      setFormData((prev) => ({\n        ...prev,\n        searchCity: undefined,\n        searchBounds: undefined,\n      }));\n      return;\n    }\n\n    try {\n      const cityGeocodingInfo = await geocodeByAddress(city);\n      console.log(cityGeocodingInfo);\n      setFormData((prev) => ({\n        ...prev,\n        searchCity: city,\n        // there is guaranteed to be one result\n        searchBounds: cityGeocodingInfo[0].boundingBox,\n      }));\n    } catch (err) {\n      // TODO: show toast and maybe clear the search?\n      console.error(\"Failed to load location information.\");\n    }\n  }\n\n  return (\n    <Modal show={true} onHide={onClose}>\n      <Modal.Header closeButton>\n        <Modal.Title>New Session</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Form>\n          <Form.Group controlId=\"sessionForm.Name\">\n            <Form.Label>Name</Form.Label>\n            <Form.Control\n              type=\"session name\"\n              value={formData.name ?? \"\"}\n              onChange={(event: any) =>\n                setFormData((prev) => ({\n                  ...prev,\n                  name: event.target.value,\n                }))\n              }\n              isInvalid={!!formDataErrors.nameError}\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              {formDataErrors.nameError}\n            </Form.Control.Feedback>\n          </Form.Group>\n          <Form.Group controlId=\"sessionForm.SearchCity\">\n            <Form.Label>Search City</Form.Label>\n            <AddressSearchBar\n              onSelect={handleCitySelect}\n              isInvalid={!!formDataErrors.searchCityError}\n              searchType={SearchType.City}\n              selected={formData.searchCity}\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              {formDataErrors.nameError}\n            </Form.Control.Feedback>\n          </Form.Group>\n        </Form>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"secondary\" onClick={onClose}>\n          Cancel\n        </Button>\n        <Button variant=\"primary\" onClick={handleCreateClick}>\n          Create\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\ninterface IProps {\n  onClose: () => void;\n}\n\ninterface CreateSessionFormData {\n  name?: string;\n  searchCity?: string;\n  searchBounds?: BoundingBox;\n}\n\nconst DEFAULT_FORM_DATA: CreateSessionFormData = {\n  name: undefined,\n  searchCity: undefined,\n  searchBounds: undefined,\n};\n\ninterface FormDataErrors {\n  nameError?: string;\n  searchCityError?: string;\n  searchBoundsError?: string;\n}\n\nconst DEFAULT_DATA_ERRORS: FormDataErrors = {\n  nameError: undefined,\n  searchCityError: undefined,\n  searchBoundsError: undefined,\n};\n\nfunction validateFormData(formData: CreateSessionFormData): FormDataErrors {\n  let nameError;\n  let searchCityError;\n  let searchBoundsError;\n\n  if (!formData.name) {\n    nameError = \"Must provide name for session\";\n  }\n  if (!formData.searchCity) {\n    console.log(\"search city error\");\n    searchCityError = \"Must enter a search city\";\n  }\n  if (!formData.searchBounds) {\n    searchBoundsError = \"Search bounds must be computed\";\n  }\n\n  return {\n    nameError,\n    searchCityError,\n    searchBoundsError,\n  };\n}\n\nfunction hasErrors(formDataError: FormDataErrors) {\n  let errorFound = false;\n\n  let key: keyof typeof formDataError;\n  for (key in formDataError) {\n    if (!!formDataError[key]) errorFound = true;\n  }\n\n  return errorFound;\n}\n","/Users/mattbalnis/Repos/PropertyPro2/src/Pages/SessionViewer/Components/MapMarker.tsx",["274","275","276"],"/Users/mattbalnis/Repos/PropertyPro2/src/Pages/Home/Components/EditSessionDialog.tsx",[],"/Users/mattbalnis/Repos/PropertyPro2/src/Pages/SessionViewer/Components/PointsOfInterest/PointsOfInterestPanel.tsx",[],"/Users/mattbalnis/Repos/PropertyPro2/src/Pages/SessionViewer/Components/Directions/DirectionsPanel.tsx",["277","278"],"import React from \"react\";\nimport { getDirections } from \"../../../../API/Google Routes\";\nimport { MapContext } from \"../../../../Contexts/MapContext\";\nimport DirectionsForm from \"./DirectionsForm\";\nimport DirectionsResults from \"./DirectionsResults\";\nimport styles from \"./DirectionsPanel.module.scss\";\nimport LoadingSpinner from \"../../../../Components/LoadingSpinner\";\n\nexport default function DirectionsPanel() {\n  const { showDirections, clearDirections } = React.useContext(MapContext);\n  const [directions, setDirections] =\n    React.useState<google.maps.DirectionsResult>();\n  const [routeIndex, setRouteIndex] = React.useState(0);\n  const [loading, setLoading] = React.useState(false);\n\n  // remove directions when component unmounts\n  React.useEffect(() => {\n    return () => clearDirections();\n  }, []);\n\n  // show directions whenever they change\n  React.useEffect(() => {\n    if (!directions) {\n      clearDirections();\n    } else {\n      showDirections(directions, { routeIndex });\n    }\n  }, [directions, routeIndex]);\n\n  const handleSearch = async (\n    origin: string,\n    destination: string,\n    travelMode: google.maps.TravelMode\n  ) => {\n    try {\n      setLoading(true);\n      const directions = await getDirections({\n        origin,\n        destination,\n        travelMode,\n        provideRouteAlternatives: true,\n      });\n      setRouteIndex(0);\n      setDirections(directions);\n    } catch (error) {\n      setDirections(undefined);\n      console.error(\"Failed to load directions: \" + error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.form}>\n        <DirectionsForm onSearchClick={handleSearch} />\n      </div>\n      <div className={styles.results}>\n        {loading ? (\n          <LoadingSpinner text=\"calculating routes...\" />\n        ) : (\n          <DirectionsResults\n            directions={directions}\n            onRouteClick={setRouteIndex}\n            activeRouteIndex={routeIndex}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n","/Users/mattbalnis/Repos/PropertyPro2/src/Pages/SessionViewer/Components/Listings/ListingsPanel.tsx",[],"/Users/mattbalnis/Repos/PropertyPro2/src/Models/Session.ts",[],"/Users/mattbalnis/Repos/PropertyPro2/src/graphql/mutations.ts",[],"/Users/mattbalnis/Repos/PropertyPro2/src/graphql/queries.ts",[],"/Users/mattbalnis/Repos/PropertyPro2/src/graphql/callGraphQL.ts",[],"/Users/mattbalnis/Repos/PropertyPro2/src/API/Google Places/Geocoding.ts",[],"/Users/mattbalnis/Repos/PropertyPro2/src/Components/AddressSearchBar.tsx",[],"/Users/mattbalnis/Repos/PropertyPro2/src/Pages/SessionViewer/Components/PointsOfInterest/PointOfInterestMarker.tsx",[],"/Users/mattbalnis/Repos/PropertyPro2/src/Pages/SessionViewer/Components/Listings/ListingMarker.tsx",["279"],"/Users/mattbalnis/Repos/PropertyPro2/src/Pages/SessionViewer/Components/Listings/ListingViewer.tsx",[],"/Users/mattbalnis/Repos/PropertyPro2/src/Pages/SessionViewer/Components/Listings/NewListingDialog.tsx",["280"],"/Users/mattbalnis/Repos/PropertyPro2/src/Pages/SessionViewer/Components/Listings/ListingsList.tsx",["281","282"],"/Users/mattbalnis/Repos/PropertyPro2/src/Pages/SessionViewer/Components/Listings/EditListingDialog.tsx",["283","284"],"import React from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport Col from \"react-bootstrap/Col\";\nimport { ListingContext } from \"../../../../Contexts/ListingContext\";\nimport {\n  AutoCompleteSuggestion,\n  SearchType,\n} from \"../../../../API/Google Places\";\nimport AddressSearchBar from \"../../../../Components/AddressSearchBar\";\nimport {\n  Coordinate,\n  geocodeByAddress,\n} from \"../../../../API/Google Places/Geocoding\";\nimport { useUpdateSession } from \"../../../../Utils/Hooks\";\nimport SessionData, { Listing } from \"../../../../Models/Session\";\n\nexport default function EditListingDialog({\n  onClose,\n  session,\n  listing,\n}: IProps) {\n  const { setSelectedListing } = React.useContext(ListingContext);\n\n  const updateSessionMutation = useUpdateSession();\n\n  const [formData, setFormData] = React.useState<EditListingFormData>({\n    ...listing,\n  });\n  const [formDataErrors, setFormDataErrors] =\n    React.useState<FormDataErrors>(DEFAULT_DATA_ERRORS);\n\n  async function handleSaveClick(event: any) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    const errors = validateFormData(formData);\n    setFormDataErrors(errors);\n    if (!hasErrors(errors)) {\n      const updatedListing: Listing = {\n        id: listing.id,\n        name: formData.name!,\n        address: formData.address!,\n        location: formData.location!,\n        price: formData.price!,\n        numberOfBedrooms: formData.numberOfBedrooms!,\n        numberOfBathrooms: formData.numberOfBathrooms!,\n      };\n      const updatedListings = (session.listings ?? []).map((l) => {\n        if (l.id === listing.id) return updatedListing;\n        return l;\n      });\n      await updateSessionMutation.mutateAsync({\n        ...session,\n        listings: updatedListings,\n      });\n      setSelectedListing(updatedListing);\n      onClose();\n    }\n  }\n\n  async function handleAddressSelect(address: string | undefined) {\n    if (!address) {\n      setFormData((prev) => ({\n        ...prev,\n        address: undefined,\n        location: undefined,\n      }));\n      return;\n    }\n\n    try {\n      const addressGeocodingInfo = await geocodeByAddress(address);\n      // there is guaranteed to be one result\n      const addressInfo = addressGeocodingInfo[0];\n      console.log(addressInfo);\n      setFormData((prev) => ({\n        ...prev,\n        address: address,\n        location: addressInfo.location,\n      }));\n    } catch (err) {\n      // TODO: show toast and maybe clear the search?\n      console.error(\"Failed to load location information.\");\n    }\n  }\n\n  return (\n    <Modal show={true} onHide={onClose}>\n      <Modal.Header closeButton>\n        <Modal.Title>Edit Listing</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Form>\n          <Form.Group controlId=\"listingForm.Name\">\n            <Form.Label>Name</Form.Label>\n            <Form.Control\n              type=\"listing name\"\n              value={formData.name ?? \"\"}\n              onChange={(event: any) =>\n                setFormData((prev) => ({\n                  ...prev,\n                  name: event.target.value,\n                }))\n              }\n              isInvalid={!!formDataErrors.nameError}\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              {formDataErrors.nameError}\n            </Form.Control.Feedback>\n          </Form.Group>\n          <Form.Group controlId=\"listingForm.Address\">\n            <Form.Label>Address</Form.Label>\n            <AddressSearchBar\n              defaultInputValue={formData.address}\n              onSelect={handleAddressSelect}\n              isInvalid={!!formDataErrors.addressError}\n              searchType={SearchType.Address}\n              selected={formData.address}\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              {formDataErrors.nameError}\n            </Form.Control.Feedback>\n          </Form.Group>\n          <Form.Group controlId=\"listingForm.Price\">\n            <Form.Label>Price</Form.Label>\n            <Form.Control\n              type=\"number\"\n              value={formData.price ?? \"\"}\n              onChange={(event: any) =>\n                setFormData((prev) => ({\n                  ...prev,\n                  price: event.target.value,\n                }))\n              }\n              isInvalid={!!formDataErrors.priceError}\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              {formDataErrors.priceError}\n            </Form.Control.Feedback>\n          </Form.Group>\n          <Form.Row>\n            <Form.Group as={Col} controlId=\"listingForm.bedrooms\">\n              <Form.Label>Bedrooms</Form.Label>\n              <Form.Control\n                type=\"number\"\n                value={formData.numberOfBedrooms ?? \"\"}\n                onChange={(event: any) =>\n                  setFormData((prev) => ({\n                    ...prev,\n                    numberOfBedrooms: event.target.value,\n                  }))\n                }\n                isInvalid={!!formDataErrors.numberOfBedroomsError}\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                {formDataErrors.numberOfBedroomsError}\n              </Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group as={Col} controlId=\"listingForm.bathrooms\">\n              <Form.Label>Bathrooms</Form.Label>\n              <Form.Control\n                type=\"number\"\n                value={formData.numberOfBathrooms ?? \"\"}\n                onChange={(event: any) =>\n                  setFormData((prev) => ({\n                    ...prev,\n                    numberOfBathrooms: event.target.value,\n                  }))\n                }\n                isInvalid={!!formDataErrors.numberOfBathroomsError}\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                {formDataErrors.numberOfBathroomsError}\n              </Form.Control.Feedback>\n            </Form.Group>\n          </Form.Row>\n        </Form>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"secondary\" onClick={onClose}>\n          Cancel\n        </Button>\n        <Button variant=\"primary\" onClick={handleSaveClick}>\n          Save\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\ninterface IProps {\n  onClose: () => void;\n  listing: Listing;\n  session: SessionData;\n}\n\ninterface EditListingFormData {\n  name?: string;\n  address?: string;\n  location?: Coordinate;\n  price?: number;\n  numberOfBedrooms?: number;\n  numberOfBathrooms?: number;\n}\n\nconst DEFAULT_FORM_DATA: EditListingFormData = {\n  name: undefined,\n  address: undefined,\n  location: undefined,\n  price: undefined,\n  numberOfBedrooms: undefined,\n  numberOfBathrooms: undefined,\n};\n\ninterface FormDataErrors {\n  nameError?: string;\n  addressError?: string;\n  locationError?: string;\n  priceError?: string;\n  numberOfBedroomsError?: string;\n  numberOfBathroomsError?: string;\n}\n\nconst DEFAULT_DATA_ERRORS: FormDataErrors = {\n  nameError: undefined,\n  addressError: undefined,\n  locationError: undefined,\n  priceError: undefined,\n  numberOfBedroomsError: undefined,\n  numberOfBathroomsError: undefined,\n};\n\nfunction validateFormData(formData: EditListingFormData): FormDataErrors {\n  let nameError,\n    addressError,\n    locationError,\n    priceError,\n    numberOfBedroomsError,\n    numberOfBathroomsError;\n\n  if (!formData.name) {\n    nameError = \"Must provide name for listing\";\n  }\n  if (!formData.address) {\n    addressError = \"Must enter an address\";\n  }\n  if (!formData.location) {\n    locationError = \"Could not find address for location\";\n  }\n\n  if (!formData.price) {\n    priceError = \"Must provide a price for the listing\";\n  }\n\n  if (!formData.numberOfBedrooms) {\n    numberOfBedroomsError = \"Must provide a number of bedrooms\";\n  }\n\n  if (!formData.numberOfBathrooms) {\n    numberOfBathroomsError = \"Must provide a number of bathrooms\";\n  }\n\n  return {\n    nameError,\n    addressError,\n    locationError,\n    priceError,\n    numberOfBedroomsError,\n    numberOfBathroomsError,\n  };\n}\n\nfunction hasErrors(formDataError: FormDataErrors) {\n  let errorFound = false;\n\n  let key: keyof typeof formDataError;\n  for (key in formDataError) {\n    if (!!formDataError[key]) errorFound = true;\n  }\n\n  return errorFound;\n}\n","/Users/mattbalnis/Repos/PropertyPro2/src/Utils/address.tsx",[],"/Users/mattbalnis/Repos/PropertyPro2/src/API/Google Places/index.ts",[],"/Users/mattbalnis/Repos/PropertyPro2/src/API/Google Places/AutoComplete.ts",[],"/Users/mattbalnis/Repos/PropertyPro2/src/Pages/SessionViewer/Components/Directions/DirectionsForm.tsx",["285","286"],"import React from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faMapMarkerAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport { SearchType } from \"../../../../API/Google Places\";\nimport AddressSearchBar from \"../../../../Components/AddressSearchBar\";\nimport TravelModeButton, { getIcon } from \"./TravelModeButton\";\n\n// copying for shorthand\ntype TravelMode = google.maps.TravelMode;\nconst TravelMode = { ...google.maps.TravelMode };\n\nexport default function DirectionsForm({ onSearchClick }: IProps) {\n  const [origin, setOrigin] = React.useState<string>();\n  const [destination, setDestination] = React.useState<string>();\n  const [travelMode, setTravelMode] = React.useState<TravelMode>(\n    TravelMode.DRIVING\n  );\n\n  let navigationState = useLocation().state as\n    | {\n        origin?: string;\n        destination?: string;\n      }\n    | undefined;\n\n  // update origin and destination of they're passed via navigation\n  React.useEffect(() => {\n    if (!navigationState) return;\n\n    navigationState.origin && setOrigin(navigationState.origin);\n    navigationState.destination && setDestination(navigationState.destination);\n  }, [navigationState]);\n\n  const handleSearch = () => {\n    if (!origin || !destination) return;\n\n    onSearchClick(origin, destination, travelMode);\n  };\n\n  return (\n    <Form>\n      <Form.Group\n        controlId=\"directionsForm.Origin\"\n        className=\"d-flex w-100 align-items-center\"\n      >\n        <FontAwesomeIcon\n          className=\"mr-2\"\n          icon={faMapMarkerAlt}\n          color=\"red\"\n          title=\"Origin\"\n        />\n        <AddressSearchBar\n          onSelect={(address) => setOrigin(address ? address : undefined)}\n          isInvalid={false}\n          searchType={SearchType.Address}\n          selected={origin}\n        />\n      </Form.Group>\n      <Form.Group\n        controlId=\"directionsForm.Destination\"\n        className=\"d-flex w-100 align-items-center\"\n      >\n        <FontAwesomeIcon\n          className=\"mr-2\"\n          icon={faMapMarkerAlt}\n          color=\"red\"\n          title=\"Destination\"\n        />\n        <AddressSearchBar\n          onSelect={(address) => setDestination(address ? address : undefined)}\n          isInvalid={false}\n          searchType={SearchType.Address}\n          selected={destination}\n        />\n      </Form.Group>\n      <div className=\"d-flex w-100 align-items-center\">\n        <div className=\"d-flex align-items-center flex-grow-1\">\n          {[\n            TravelMode.DRIVING,\n            TravelMode.TRANSIT,\n            TravelMode.WALKING,\n            TravelMode.BICYCLING,\n          ].map((mode) => (\n            <TravelModeButton\n              key={mode}\n              icon={getIcon(mode)}\n              onClick={() => setTravelMode(mode)}\n              active={travelMode === mode}\n            />\n          ))}\n        </div>\n        <Button onClick={handleSearch}>Search</Button>\n      </div>\n    </Form>\n  );\n}\n\ninterface IProps {\n  onSearchClick: (\n    origin: string,\n    destination: string,\n    mode: google.maps.TravelMode\n  ) => void;\n}\n","/Users/mattbalnis/Repos/PropertyPro2/src/Pages/SessionViewer/Components/PointsOfInterest/PointOfInterestViewer.tsx",[],"/Users/mattbalnis/Repos/PropertyPro2/src/Pages/SessionViewer/Components/PointsOfInterest/PointsOfInterestList.tsx",["287","288"],"/Users/mattbalnis/Repos/PropertyPro2/src/Pages/SessionViewer/Components/PointsOfInterest/NewPointOfInterestDialog.tsx",["289"],"/Users/mattbalnis/Repos/PropertyPro2/src/Pages/SessionViewer/Components/Directions/DirectionsResults.tsx",[],"/Users/mattbalnis/Repos/PropertyPro2/src/API/Google Routes/index.ts",[],"/Users/mattbalnis/Repos/PropertyPro2/src/API.ts",[],"/Users/mattbalnis/Repos/PropertyPro2/src/Pages/SessionViewer/Components/Directions/TravelModeButton.tsx",["290"],"import React from \"react\";\nimport classNames from \"classnames\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { IconProp } from \"@fortawesome/fontawesome-svg-core\";\nimport {\n  faWalking,\n  faCar,\n  faSubway,\n  faBiking,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport styles from \"./TravelModeButton.module.scss\";\n\n// copying for shorthand\ntype TravelMode = google.maps.TravelMode;\nconst TravelMode = { ...google.maps.TravelMode };\n\nexport default function TravelModeButton({\n  icon,\n  active,\n  onClick,\n}: TravelModeButtonProps) {\n  return (\n    <div\n      className={classNames(styles.travelModeButton, active && styles.active)}\n      onClick={onClick}\n    >\n      <FontAwesomeIcon icon={icon} />\n    </div>\n  );\n}\n\ninterface TravelModeButtonProps {\n  icon: IconProp;\n  active?: boolean;\n  onClick: () => void;\n}\n\nexport function getIcon(travelMode: TravelMode): IconProp {\n  if (travelMode === TravelMode.BICYCLING) return faBiking;\n  if (travelMode === TravelMode.TRANSIT) return faSubway;\n  if (travelMode === TravelMode.WALKING) return faWalking;\n  return faCar;\n}\n","/Users/mattbalnis/Repos/PropertyPro2/src/Pages/SessionViewer/Components/PointsOfInterest/EditPointOfInterestDialog.tsx",["291","292"],"import React from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport {\n  AutoCompleteSuggestion,\n  SearchType,\n} from \"../../../../API/Google Places\";\nimport AddressSearchBar from \"../../../../Components/AddressSearchBar\";\nimport {\n  Coordinate,\n  geocodeByAddress,\n} from \"../../../../API/Google Places/Geocoding\";\nimport { useUpdateSession } from \"../../../../Utils/Hooks\";\nimport SessionData, { PointOfInterest } from \"../../../../Models/Session\";\nimport { PointOfInterestType } from \"../../../../API\";\nimport { PointOfInterestContext } from \"../../../../Contexts/PointOfInterestContext\";\nimport { Typeahead } from \"react-bootstrap-typeahead\";\n\nexport default function EditPointOfInterestDialog({\n  onClose,\n  session,\n  pointOfInterest,\n}: IProps) {\n  const { setSelectedPointOfInterest } = React.useContext(\n    PointOfInterestContext\n  );\n\n  const updateSessionMutation = useUpdateSession();\n\n  const [formData, setFormData] = React.useState<EditPointOfInterestFormData>({\n    ...pointOfInterest,\n  });\n  const [formDataErrors, setFormDataErrors] =\n    React.useState<FormDataErrors>(DEFAULT_DATA_ERRORS);\n\n  async function handleSaveClick(event: any) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    const errors = validateFormData(formData);\n    setFormDataErrors(errors);\n    if (!hasErrors(errors)) {\n      const updatedPointOfInterest: PointOfInterest = {\n        id: pointOfInterest.id,\n        name: formData.name!,\n        type: formData.type!,\n        address: formData.address!,\n        location: formData.location!,\n      };\n      const updatedPointsOfInterest = (session.pointsOfInterest ?? []).map(\n        (p) => {\n          if (p.id === pointOfInterest.id) return updatedPointOfInterest;\n          return p;\n        }\n      );\n      await updateSessionMutation.mutateAsync({\n        ...session,\n        pointsOfInterest: updatedPointsOfInterest,\n      });\n      setSelectedPointOfInterest(updatedPointOfInterest);\n      onClose();\n    }\n  }\n\n  async function handleAddressSelect(address: string | undefined) {\n    if (!address) {\n      setFormData((prev) => ({\n        ...prev,\n        address: undefined,\n        location: undefined,\n      }));\n      return;\n    }\n\n    try {\n      const addressGeocodingInfo = await geocodeByAddress(address);\n      // there is guaranteed to be one result\n      const addressInfo = addressGeocodingInfo[0];\n      console.log(addressInfo);\n      setFormData((prev) => ({\n        ...prev,\n        address: address,\n        location: addressInfo.location,\n      }));\n    } catch (err) {\n      // TODO: show toast and maybe clear the search?\n      console.error(\"Failed to load location information.\");\n    }\n  }\n\n  return (\n    <Modal show={true} onHide={onClose}>\n      <Modal.Header closeButton>\n        <Modal.Title>Edit Point of Interest</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Form>\n          <Form.Group controlId=\"pointOfInterestForm.Name\">\n            <Form.Label>Name</Form.Label>\n            <Form.Control\n              type=\"point of interest name\"\n              value={formData.name ?? \"\"}\n              onChange={(event: any) =>\n                setFormData((prev) => ({\n                  ...prev,\n                  name: event.target.value,\n                }))\n              }\n              isInvalid={!!formDataErrors.nameError}\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              {formDataErrors.nameError}\n            </Form.Control.Feedback>\n          </Form.Group>\n          <Form.Group controlId=\"pointOfInterestForm.Address\">\n            <Form.Label>Address</Form.Label>\n            <AddressSearchBar\n              defaultInputValue={formData.address}\n              onSelect={handleAddressSelect}\n              isInvalid={!!formDataErrors.addressError}\n              searchType={SearchType.Address}\n              selected={formData.address}\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              {formDataErrors.nameError}\n            </Form.Control.Feedback>\n          </Form.Group>\n          <Form.Group controlId=\"pointOfInterestForm.Type\">\n            <Form.Label>Type</Form.Label>\n            <Typeahead\n              selected={[\n                formData.type === PointOfInterestType.WORK ? \"Work\" : \"Other\",\n              ]}\n              options={[\"Work\", \"Other\"]}\n              onChange={(selected) => {\n                const type = selected.length > 0 ? selected[0] : undefined;\n                setFormData((prev) => ({\n                  ...prev,\n                  type:\n                    type === \"Work\"\n                      ? PointOfInterestType.WORK\n                      : PointOfInterestType.OTHER,\n                }));\n              }}\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              {formDataErrors.typeError}\n            </Form.Control.Feedback>\n          </Form.Group>\n        </Form>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"secondary\" onClick={onClose}>\n          Cancel\n        </Button>\n        <Button variant=\"primary\" onClick={handleSaveClick}>\n          Save\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\ninterface IProps {\n  onClose: () => void;\n  pointOfInterest: PointOfInterest;\n  session: SessionData;\n}\n\ninterface EditPointOfInterestFormData {\n  name?: string;\n  type?: PointOfInterestType;\n  address?: string;\n  location?: Coordinate;\n}\n\nconst DEFAULT_FORM_DATA: EditPointOfInterestFormData = {\n  name: undefined,\n  type: undefined,\n  address: undefined,\n  location: undefined,\n};\n\ninterface FormDataErrors {\n  nameError?: string;\n  typeError?: string;\n  addressError?: string;\n  locationError?: string;\n}\n\nconst DEFAULT_DATA_ERRORS: FormDataErrors = {\n  nameError: undefined,\n  typeError: undefined,\n  addressError: undefined,\n  locationError: undefined,\n};\n\nfunction validateFormData(\n  formData: EditPointOfInterestFormData\n): FormDataErrors {\n  let nameError, typeError, addressError, locationError;\n\n  if (!formData.name) {\n    nameError = \"Must provide name for point of interest\";\n  }\n  if (!formData.type) {\n    nameError = \"Must provide type for point of interest\";\n  }\n  if (!formData.address) {\n    addressError = \"Must enter an address\";\n  }\n  if (!formData.location) {\n    locationError = \"Could not find address for location\";\n  }\n\n  return {\n    nameError,\n    typeError,\n    addressError,\n    locationError,\n  };\n}\n\nfunction hasErrors(formDataError: FormDataErrors) {\n  let errorFound = false;\n\n  let key: keyof typeof formDataError;\n  for (key in formDataError) {\n    if (!!formDataError[key]) errorFound = true;\n  }\n\n  return errorFound;\n}\n","/Users/mattbalnis/Repos/PropertyPro2/src/API/Google Routes/Directions.ts",[],"/Users/mattbalnis/Repos/PropertyPro2/src/Utils/Hooks/useOnClickOutside.tsx",[],"/Users/mattbalnis/Repos/PropertyPro2/src/Utils/Hooks/useSelectedListing.tsx",["293","294"],"/Users/mattbalnis/Repos/PropertyPro2/src/Contexts/SessionContext.tsx",[],"/Users/mattbalnis/Repos/PropertyPro2/src/Utils/Hooks/useSelectedPointOfInterest.tsx",["295"],{"ruleId":"296","replacedBy":"297"},{"ruleId":"298","replacedBy":"299"},{"ruleId":"296","replacedBy":"297"},{"ruleId":"298","replacedBy":"299"},{"ruleId":"300","severity":1,"message":"301","line":14,"column":5,"nodeType":"302","messageId":"303","endLine":14,"endColumn":12},{"ruleId":"300","severity":1,"message":"304","line":2,"column":10,"nodeType":"302","messageId":"303","endLine":2,"endColumn":17},{"ruleId":"305","severity":1,"message":"306","line":52,"column":6,"nodeType":"307","endLine":52,"endColumn":15,"suggestions":"308"},{"ruleId":"305","severity":1,"message":"306","line":71,"column":6,"nodeType":"307","endLine":71,"endColumn":48,"suggestions":"309"},{"ruleId":"300","severity":1,"message":"301","line":14,"column":5,"nodeType":"302","messageId":"303","endLine":14,"endColumn":12},{"ruleId":"300","severity":1,"message":"310","line":1,"column":8,"nodeType":"302","messageId":"303","endLine":1,"endColumn":13},{"ruleId":"300","severity":1,"message":"311","line":49,"column":13,"nodeType":"302","messageId":"303","endLine":49,"endColumn":21},{"ruleId":"300","severity":1,"message":"311","line":86,"column":13,"nodeType":"302","messageId":"303","endLine":86,"endColumn":21},{"ruleId":"300","severity":1,"message":"312","line":5,"column":10,"nodeType":"302","messageId":"303","endLine":5,"endColumn":32},{"ruleId":"300","severity":1,"message":"313","line":2,"column":8,"nodeType":"302","messageId":"303","endLine":2,"endColumn":19},{"ruleId":"314","severity":1,"message":"315","line":9,"column":16,"nodeType":"302","messageId":"316","endLine":9,"endColumn":26},{"ruleId":"314","severity":1,"message":"315","line":14,"column":16,"nodeType":"302","messageId":"316","endLine":14,"endColumn":26},{"ruleId":"305","severity":1,"message":"317","line":19,"column":6,"nodeType":"307","endLine":19,"endColumn":8,"suggestions":"318"},{"ruleId":"305","severity":1,"message":"319","line":28,"column":6,"nodeType":"307","endLine":28,"endColumn":30,"suggestions":"320"},{"ruleId":"300","severity":1,"message":"313","line":13,"column":8,"nodeType":"302","messageId":"303","endLine":13,"endColumn":19},{"ruleId":"300","severity":1,"message":"313","line":14,"column":8,"nodeType":"302","messageId":"303","endLine":14,"endColumn":19},{"ruleId":"300","severity":1,"message":"313","line":6,"column":8,"nodeType":"302","messageId":"303","endLine":6,"endColumn":19},{"ruleId":"305","severity":1,"message":"321","line":57,"column":6,"nodeType":"307","endLine":57,"endColumn":8,"suggestions":"322"},{"ruleId":"300","severity":1,"message":"312","line":8,"column":3,"nodeType":"302","messageId":"303","endLine":8,"endColumn":25},{"ruleId":"300","severity":1,"message":"323","line":208,"column":7,"nodeType":"302","messageId":"303","endLine":208,"endColumn":45},{"ruleId":"300","severity":1,"message":"324","line":2,"column":10,"nodeType":"302","messageId":"303","endLine":2,"endColumn":21},{"ruleId":"325","severity":1,"message":"326","line":13,"column":7,"nodeType":"302","messageId":"327","endLine":13,"endColumn":17},{"ruleId":"300","severity":1,"message":"313","line":6,"column":8,"nodeType":"302","messageId":"303","endLine":6,"endColumn":19},{"ruleId":"305","severity":1,"message":"328","line":62,"column":6,"nodeType":"307","endLine":62,"endColumn":8,"suggestions":"329"},{"ruleId":"300","severity":1,"message":"313","line":13,"column":8,"nodeType":"302","messageId":"303","endLine":13,"endColumn":19},{"ruleId":"325","severity":1,"message":"326","line":15,"column":7,"nodeType":"302","messageId":"327","endLine":15,"endColumn":17},{"ruleId":"300","severity":1,"message":"312","line":6,"column":3,"nodeType":"302","messageId":"303","endLine":6,"endColumn":25},{"ruleId":"300","severity":1,"message":"323","line":178,"column":7,"nodeType":"302","messageId":"303","endLine":178,"endColumn":53},{"ruleId":"300","severity":1,"message":"313","line":2,"column":8,"nodeType":"302","messageId":"303","endLine":2,"endColumn":19},{"ruleId":"305","severity":1,"message":"330","line":29,"column":5,"nodeType":"307","endLine":29,"endColumn":14,"suggestions":"331"},{"ruleId":"305","severity":1,"message":"330","line":33,"column":5,"nodeType":"307","endLine":33,"endColumn":14,"suggestions":"332"},"no-native-reassign",["333"],"no-negated-in-lhs",["334"],"@typescript-eslint/no-unused-vars","'isError' is assigned a value but never used.","Identifier","unusedVar","'Listing' is defined but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'setCenter' and 'setZoom'. Either include them or remove the dependency array.","ArrayExpression",["335"],["336"],"'React' is defined but never used.","'response' is assigned a value but never used.","'AutoCompleteSuggestion' is defined but never used.","'SessionData' is defined but never used.","@typescript-eslint/no-use-before-define","'MarkerType' was used before it was defined.","noUseBeforeDefine","React Hook React.useEffect has a missing dependency: 'clearDirections'. Either include it or remove the dependency array.",["337"],"React Hook React.useEffect has missing dependencies: 'clearDirections' and 'showDirections'. Either include them or remove the dependency array.",["338"],"React Hook React.useEffect has missing dependencies: 'listing.id' and 'removeHoveredListingId'. Either include them or remove the dependency array.",["339"],"'DEFAULT_FORM_DATA' is assigned a value but never used.","'useNavigate' is defined but never used.","@typescript-eslint/no-redeclare","'TravelMode' is already defined.","redeclared","React Hook React.useEffect has missing dependencies: 'pointOfInterest.id' and 'removeHoveredPointOfInterestId'. Either include them or remove the dependency array.",["340"],"React Hook React.useCallback has a missing dependency: 'navigate'. Either include it or remove the dependency array.",["341"],["342"],"no-global-assign","no-unsafe-negation",{"desc":"343","fix":"344"},{"desc":"345","fix":"346"},{"desc":"347","fix":"348"},{"desc":"349","fix":"350"},{"desc":"351","fix":"352"},{"desc":"353","fix":"354"},{"desc":"355","fix":"356"},{"desc":"355","fix":"357"},"Update the dependencies array to be: [session, setCenter, setZoom]",{"range":"358","text":"359"},"Update the dependencies array to be: [selectedListing, selectedPointOfInterest, setCenter, setZoom]",{"range":"360","text":"361"},"Update the dependencies array to be: [clearDirections]",{"range":"362","text":"363"},"Update the dependencies array to be: [clearDirections, directions, routeIndex, showDirections]",{"range":"364","text":"365"},"Update the dependencies array to be: [listing.id, removeHoveredListingId]",{"range":"366","text":"367"},"Update the dependencies array to be: [pointOfInterest.id, removeHoveredPointOfInterestId]",{"range":"368","text":"369"},"Update the dependencies array to be: [navigate, session.id]",{"range":"370","text":"371"},{"range":"372","text":"371"},[2173,2182],"[session, setCenter, setZoom]",[2709,2751],"[selectedListing, selectedPointOfInterest, setCenter, setZoom]",[810,812],"[clearDirections]",[1006,1030],"[clearDirections, directions, routeIndex, showDirections]",[1719,1721],"[listing.id, removeHoveredListingId]",[2016,2018],"[pointOfInterest.id, removeHoveredPointOfInterestId]",[1003,1012],"[navigate, session.id]",[1106,1115]]